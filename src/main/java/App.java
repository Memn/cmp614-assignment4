import org.apache.log4j.Logger;
import org.apache.mahout.math.Vector;
import tr.edu.hacettepe.PageRank;
import tr.edu.hacettepe.structure.Graph;
import tr.edu.hacettepe.summary.Evaluation;
import tr.edu.hacettepe.summary.Summarizer;
import tr.edu.hacettepe.summary.SummaryEvaluator;
import tr.edu.hacettepe.util.FileUtil;
import tr.edu.hacettepe.util.MMR;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    private final static Logger LOGGER = Logger.getLogger(App.class);
    private static final String DATA_PATH = "C:\\Users\\MehmetEminMumcu\\Desktop\\memn\\hacettepe\\cmp614\\assignments\\assignment4\\cmp614-assignment4\\src\\main\\resources\\data";
    private static final String EXTRACTS_PATH = "C:\\Users\\MehmetEminMumcu\\Desktop\\memn\\hacettepe\\cmp614\\assignments\\assignment4\\cmp614-assignment4\\src\\main\\resources\\extracts";
    private static final String SENTENCES_FILENAME = "sents.txt";
    private static final String SIMILARITIES_FILENAME = "sims.mat";

    public static void main(String[] args) {

        Path extractsPath = Paths.get(EXTRACTS_PATH);

        try {
            SummaryEvaluator summaryEvaluator = new SummaryEvaluator(extractsPath);
            for (Path innerDataFolder : Files.newDirectoryStream(Paths.get(DATA_PATH))) {
                // article's folder
                // we need sents.txt and sims.mat files
                List<String> sentences = FileUtil.readAllLinesInFolder(innerDataFolder, SENTENCES_FILENAME);
                Path simsInFolder = FileUtil.findPath4Name(innerDataFolder, SIMILARITIES_FILENAME);

                Graph graph = new Graph.Builder().numNeighbors(20).build(simsInFolder, sentences.size());
                Vector ranks = new PageRank(graph, 0.85).calculateRanks();

                LinkedHashSet<Integer> marginalOrder = new MMR(ranks, graph.getAdjacency()).marginalOrder();
                Set<Evaluation> evaluate = summaryEvaluator.evaluate(new Summarizer(innerDataFolder, marginalOrder, sentences));
                evaluate.forEach(evaluation -> LOGGER.info(evaluation.toString()));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }


    }
}
