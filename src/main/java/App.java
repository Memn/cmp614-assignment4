import org.apache.log4j.Logger;
import org.apache.mahout.math.Vector;
import tr.edu.hacettepe.PageRank;
import tr.edu.hacettepe.structure.Graph;
import tr.edu.hacettepe.summary.Evaluation;
import tr.edu.hacettepe.summary.Summarizer;
import tr.edu.hacettepe.summary.SummaryEvaluator;
import tr.edu.hacettepe.util.FileUtil;
import tr.edu.hacettepe.util.MMR;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    private final static Logger LOGGER = Logger.getLogger(App.class);

    private static final String SENTENCES_FILENAME = "sents.txt";
    private static final String SIMILARITIES_FILENAME = "sims.mat";
    private static final String DATA_NAME = "data";
    private static final String EXTRACTS_NAME = "extracts";

    public static void main(String[] args) {

        if (args.length != 1) {
            LOGGER.error("You should pass the file path of dataset file!\n" +
                    "Ex: gradle run -D exec.args=\"DataAndExtractsFolderParentPath\"\n");
            return;
        }

        String BASE_PATH = args[0];

        new App().summaryMetrics(BASE_PATH);
    }

    private void summaryMetrics(String BASE_PATH) {
        Path extractsPath = Paths.get(BASE_PATH, EXTRACTS_NAME);

        double totalTruePositives = 0;
        double totalManualSummaryCounts = 0;
        double totalSummaryCounts = 0;

        double maxRecall = Double.NEGATIVE_INFINITY;
        Evaluation maxRecallEvaluation = null;
        double maxPrecision = Double.NEGATIVE_INFINITY;
        Evaluation maxPrecisionEvaluation = null;

        try {
            SummaryEvaluator summaryEvaluator = new SummaryEvaluator(extractsPath);
            for (Path innerDataFolder : Files.newDirectoryStream(Paths.get(BASE_PATH, DATA_NAME))) {
                // article's folder
                // we need sents.txt and sims.mat files
                List<String> sentences = FileUtil.readAllLinesInFolder(innerDataFolder, SENTENCES_FILENAME);
                Path simsInFolder = FileUtil.findPath4Name(innerDataFolder, SIMILARITIES_FILENAME);

                Graph graph = new Graph.Builder().numNeighbors(20).build(simsInFolder, sentences.size());
                Vector ranks = new PageRank(graph, 0.85).calculateRanks();

                LinkedHashSet<Integer> marginalOrder = new MMR(ranks, graph.getAdjacency()).marginalOrder();
                Set<Evaluation> evaluate = summaryEvaluator.evaluate(new Summarizer(innerDataFolder, marginalOrder, sentences));

                for (Evaluation evaluation : evaluate) {
                    LOGGER.info(evaluation.toString());
                    if (maxPrecision <= evaluation.precision()) {
                        maxPrecision = evaluation.precision();
                        maxPrecisionEvaluation = evaluation;
                    }
                    if (maxRecall < evaluation.recall()) {
                        maxRecall = evaluation.recall();
                        maxRecallEvaluation = evaluation;
                    }
                    totalTruePositives += evaluation.truePositives();
                    totalSummaryCounts += evaluation.summaryCounts();
                    totalManualSummaryCounts += evaluation.manualSummaryCounts();
                }

            }
            LOGGER.info("#####################################################");
            double recall = totalTruePositives / totalManualSummaryCounts;
            double precision = totalTruePositives / totalSummaryCounts;
            LOGGER.info(String.format("Overall measures: Recall:%.4f,\tPrecision:%.4f", recall, precision));
            LOGGER.info("#####################################################");
            LOGGER.info("");
            LOGGER.info("#####################################################");
            assert maxPrecisionEvaluation != null;
            assert maxRecallEvaluation != null;
            LOGGER.info("Max measures:");
            LOGGER.info(String.format("Recall:%s", maxRecallEvaluation.toString()));
            LOGGER.info(String.format("Precision:%s", maxPrecisionEvaluation.toString()));
            LOGGER.info("#####################################################");

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
